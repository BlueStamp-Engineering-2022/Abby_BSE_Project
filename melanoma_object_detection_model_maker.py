
"""Copy of Model Maker Object Detection for Android Figurine

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1P0QsdcwvhRFtVkpl6fgsSvlWFGN2c5hG

<a href="https://colab.research.google.com/github/khanhlvg/tflite_raspberry_pi/blob/main/object_detection/Train_custom_model_tutorial.ipynb" target="_parent"><img src="https://colab.research.google.com/assets/colab-badge.svg" alt="Open In Colab"/></a>

Copyright 2021 The TensorFlow Authors.
"""

#@title Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Train a custom object detection model with TensorFlow Lite Model Maker
# 
# In this colab notebook, you'll learn how to use the [TensorFlow Lite Model Maker](https://www.tensorflow.org/lite/guide/model_maker) to train a custom object detection model to detect Android figurines and how to put the model on a Raspberry Pi.
# The Model Maker library uses *transfer learning* to simplify the process of training a TensorFlow Lite model using a custom dataset. Retraining a TensorFlow Lite model with your own custom dataset reduces the amount of training data required and will shorten the training time.
# 
# Preparation
# 
# Install the required packages
# Start by installing the required packages, including the Model Maker package from the [GitHub repo](https://github.com/tensorflow/examples/tree/master/tensorflow_examples/lite/model_maker) and the pycocotools library you'll use for evaluation.


!pip install -q tflite-model-maker
!pip install -q tflite-support

# Import the required packages.

import numpy as np
import os

from tflite_model_maker.config import ExportFormat, QuantizationConfig
from tflite_model_maker import model_spec
from tflite_model_maker import object_detector

from tflite_support import metadata

import tensorflow as tf
assert tf.__version__.startswith('2')

tf.get_logger().setLevel('ERROR')
from absl import logging
logging.set_verbosity(logging.ERROR)

# Custom melanoma and mole image dataset has already been uploaded to google colab

# unzip the custom images.zip file
!unzip -q images.zip

# Train the object detection model


# Step 1: Select a model architecture
# EfficientDet-Lite[0-4] are a family of mobile/IoT-friendly object detection models derived from the [EfficientDet](https://arxiv.org/abs/1911.09070) architecture.
# In this notebook, we use EfficientDet-Lite1 to train our model. You can choose other model architectures depending on whether speed or accuracy is more important to you.


spec = model_spec.get('efficientdet_lite1')

# Step 2: Load the dataset

# Images in `train_data` is used to train the custom object detection model.
# Images in `val_data` is used to check if the model can generalize well to new images that it hasn't seen before.

train_data = object_detector.DataLoader.from_pascal_voc(
    '/content/images/train/converted',
    '/content/images/train/converted',
    ['melanoma', 'benign_mole']
)
print(train_data)
print(len(train_data))

val_data = object_detector.DataLoader.from_pascal_voc(
    '/content/images/val-and-test/converted',
    '/content/images/val-and-test/converted',
    ['melanoma', 'benign_mole']
)
print(val_data)
print(len(val_data))

# Step 3: Train the TensorFlow model with the training data.
# Set `epochs = 25`, which means it will go through the training dataset 25 times. You can look at the validation accuracy during training and stop when you see validation loss (`val_loss`) stop decreasing to avoid overfitting.
# Set `batch_size = 4` here so you will see that it takes 17 steps to go through the 68 images in the training dataset.
# Set `train_whole_model=True` to fine-tune the whole model instead of just training the head layer to improve accuracy. The trade-off is that it may take longer to train the model.

model = object_detector.create(train_data, model_spec=spec, batch_size=4, train_whole_model=True, epochs=25, validation_data=val_data)

# Step 4. Evaluate the model with the validation data.

# After training the object detection model using the images in the training dataset, use the 31 images in the validation dataset to evaluate how the model performs against new data it has never seen before.
# As the default batch size is 64, it will take 1 step to go through the 10 images in the validation dataset.
# The evaluation metrics are same as [COCO](https://cocodataset.org/#detection-eval).

model.evaluate(val_data)

# Step 5: Export as a TensorFlow Lite model.
# Export the trained object detection model to the TensorFlow Lite format by specifying which folder you want to export the quantized model to. The default post-training quantization technique is [full integer quantization](https://www.tensorflow.org/lite/performance/post_training_integer_quant). This allows the TensorFlow Lite model to be smaller, run faster on Raspberry Pi CPU and also compatible with the Google Coral EdgeTPU.

model.export(export_dir='.', tflite_filename='melanoma.tflite')

# Step 6:  Evaluate the TensorFlow Lite model.

# Several factors can affect the model accuracy when exporting to TFLite:
#  [Quantization](https://www.tensorflow.org/lite/performance/model_optimization) helps shrinking the model size by 4 times at the expense of some accuracy drop.
#  The original TensorFlow model uses per-class [non-max supression (NMS)](https://www.coursera.org/lecture/convolutional-neural-networks/non-max-suppression-dvrjH) for post-processing, while the TFLite model uses global NMS that's much faster but less accurate.
# Keras outputs maximum 100 detections while tflite outputs maximum 25 detections.
# 
# Therefore you'll have to evaluate the exported TFLite model and compare its accuracy with the original TensorFlow model.


model.evaluate_tflite('melanoma.tflite', val_data)

# Download the TFLite model to your local computer.
from google.colab import files
files.download('melanoma.tflite')
